
Given a string containing digits from 2-9 inclusive, return all possible letter combinations 
that the number could represent. Return the answer in any order.

A mapping of digit to letters (just like on the telephone buttons) is given below.
Note that 1 does not map to any letters.

Example 1:

Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]
Example 2:

Input: digits = ""
Output: []
Example 3:

Input: digits = "2"
Output: ["a","b","c"]






class Solution {
public:
    
    
    void combinations( unordered_map<char,string> &mp,vector<string> &res,
                     string temp,string digits,int currIdx){
        
        if(currIdx>=digits.size()){
            res.push_back(temp);
            return;
        }
        
        char s=digits[currIdx];
        string alpha=mp[s];
        
        for(int i=0;i<alpha.size();i++){
            
            temp.push_back(alpha[i]);
            combinations(mp,res,temp,digits,currIdx+1);
            temp.pop_back();
            
        }
        return ;
        
    }
    
    vector<string> letterCombinations(string digits) {
       
        //map each number with associated alphabets 
        unordered_map<char,string> mp{
            
            {'1'," "},
            {'2',"abc"},
            {'3',"def"},
            {'4',"ghi"},
            {'5',"jkl"},
            {'6',"mno"},
            {'7',"pqrs"},
            {'8',"tuv"},
            {'9',"wxyz"}
        
        };
        
        vector<string> res;
        string temp;
        
        if(digits.size()==0)
            return res;
        
        
        combinations(mp,res,temp,digits,0);
        
        return res;
        
        
    }
};
