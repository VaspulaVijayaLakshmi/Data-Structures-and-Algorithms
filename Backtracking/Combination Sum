Given an array of distinct integers candidates and a target integer target,
return a list of all unique combinations of candidates where the chosen numbers sum to target. 
You may return the combinations in any order.

The same number may be chosen from candidates an unlimited number of times. 
Two combinations are unique if the frequency of at least one of the chosen numbers is different.

It is guaranteed that the number of unique combinations that sum up to target is 
less than 150 combinations for the given input.

 

Example 1:

Input: candidates = [2,3,6,7], target = 7
Output: [[2,2,3],[7]]
Explanation:
2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.
7 is a candidate, and 7 = 7.
These are the only two combinations.
Example 2:

Input: candidates = [2,3,5], target = 8
Output: [[2,2,2,2],[2,3,3],[3,5]]
Example 3:

Input: candidates = [2], target = 1
Output: []



class Solution {
public:
    
    void helper(vector<int> &candidates,vector<vector<int>> &res,
                vector<int> temp,int target,int currIndex){
        
        
        //if we have reached the last index
        if(currIndex==candidates.size()){
            
            //if target =0 ,we will push that into result
            if(target==0) res.push_back(temp);
            return ;
        }
        
        
        //if the element  at a particular idx 
        //is less than target ,
        
        if(candidates[currIndex]<=target){
            
        temp.push_back(candidates[currIndex]);
            //do not do currIndex+1,because we can take that element again
        helper(candidates,res,temp,target-candidates[currIndex],currIndex);
        temp.pop_back();
    }
        
        //if the element  at a particular idx 
        //is greater than target ,then dont add that element
        helper(candidates,res,temp,target,currIndex+1);
        
    }
    
    
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        
        vector<vector<int>> res;
        vector<int> temp;
        helper(candidates,res,temp,target,0);
        
        return res;
        
    
    }
};
