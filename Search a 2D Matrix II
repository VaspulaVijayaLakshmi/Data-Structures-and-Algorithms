problem link:
https://leetcode.com/problems/search-a-2d-matrix-ii/

problem: 
Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. 
This matrix has the following properties:

Integers in each row are sorted in ascending from left to right.
Integers in each column are sorted in ascending from top to bottom.


Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5
Output: true


Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20
Output: false


class Solution {
public:
    bool searchMatrix(vector<vector<int>>& mat, int target) {
    
    //strt checking with last col in 1st row
    
     int col=mat[0].size()-1;
        int row=0;
        
        while(row < mat.size()  && col>=0 ){
            
            if(mat[row][col]==target) return true;
            else if(mat[row][col]>target) col--;
            else if(mat[row][col]<target) row++;
        }
        
        return false;
    }   
    
};
