/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* merge(ListNode* list1, ListNode* list2){

        if(list1==NULL) return list2;
        if(list2==NULL) return list1;

        ListNode* temp1=list1,*temp2=list2;
        ListNode* newHead = new ListNode(-1);
        ListNode* curr=newHead;

        while(temp1!=NULL && temp2!=NULL){

            if(temp1->val <= temp2->val){
                curr->next = temp1;
                temp1=temp1->next;
            }

            else{
                curr->next=temp2;
                temp2=temp2->next;
            }

            curr=curr->next;
        }

        if(temp1!=NULL) curr->next=temp1;
        if(temp2!=NULL) curr->next=temp2;

        return newHead->next;

    }


    ListNode* mergeKLists(vector<ListNode*>& lists) {

        if(lists.size()==0)
         return NULL;

        if(lists.size()==1) 
         return lists[0]; 
        
        ListNode* head=lists[0];
        for(int i=1;i<lists.size();i++){

            head = merge(head,lists[i]);
        }

        return head;
        
    }
};
