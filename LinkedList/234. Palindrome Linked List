/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {

        if(head==NULL || head->next==NULL)
          return true;

        //find middle of linked list
        //reverse it
        //check if both are same

        ListNode* fst=head,*slw=head;
        while(fst!=NULL && fst->next!=NULL){
           fst=fst->next->next;
           slw=slw->next;
        }  


        ListNode* curr=slw,*prev=NULL,*next=NULL;
        while(curr!=NULL){
            next=curr->next;
            curr->next=prev;
            prev=curr;
            curr=next;
        }

        //prev will be the new head
        // ListNode* newHead=prev;

        ListNode* temp1=head,*temp2=prev;

        while(temp2!=NULL){

            if(temp1->val != temp2->val) return false;

            temp1=temp1->next;
            temp2=temp2->next;
             
        }

        return true;
        
    }
};
