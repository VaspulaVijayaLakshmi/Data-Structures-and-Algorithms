problem: 

You are given a perfect binary tree where all leaves are on the same level, 
and every parent has two children. The binary tree has the following definition:

struct Node {
  int val;
  Node *left;
  Node *right;
  Node *next;
}
Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.

Initially, all next pointers are set to NULL.


Input: root = [1,2,3,4,5,6,7]
Output: [1,#,2,3,#,4,5,6,7,#]
Explanation: Given the above perfect binary tree (Figure A), your function should populate each
next pointer to point to its next right node, just like in Figure B. 
The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.



class Solution {
public:
    Node* connect(Node* root) {
        if(root==NULL) return root;
      queue<Node*> q;
        q.push(root);
        
        while(!q.empty()){
            int size=q.size();
            
            while(size--){
                
                Node* front=q.front();
                q.pop();
                
                front->next= size ? q.front() : NULL;
                
                if(front->left) q.push(front->left);
                if(front->right) q.push(front->right);
            }
        }
        return root;
    }
};




slight variation of this

problem link:
https://www.educative.io/m/connect-all-siblings


//Connect All Siblings

Given the root to a binary tree where each node has an additional pointer called sibling (or next),
connect the sibling pointer to the next node in the same level. 
The last node in each level should point to the first node of the next level in the tree.


 Node* connect(Node* root) {
        if(root==NULL) return root;
      queue<Node*> q;
        q.push(root);
        
        while(!q.empty()){
           
                Node* front=q.front();
                q.pop();
                
 
                if(front->left) q.push(front->left);
                if(front->right) q.push(front->right);
                
                  front->next= size ? q.front() : NULL;
            }
        }
        return root;
    }
