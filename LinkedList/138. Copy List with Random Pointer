/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
public:
    Node* copyRandomList(Node* head) {

        Node* temp=head;
        unordered_map<Node*,Node*> mp;

        //mapping orginal to my duplicate
        while(temp!=NULL){

           mp[temp] = new Node(temp->val);
           temp=temp->next;
        }

        temp=head;
        while(temp!=NULL){
            
            Node* newNode = mp[temp];
            newNode->next = mp[temp->next];
            newNode->random = mp[temp->random];

            temp=temp->next;
            
            
        }

        return mp[head];
        
    }
};



