class Solution {
public:
    vector<vector<int>> onesMinusZeros(vector<vector<int>>& grid) {
        
        int n=grid.size();
        int m= grid[0].size();

        vector<int> onesRow(n,0);
        vector<int> onesCol(m,0);
    


        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){

                if(grid[i][j]==1){

                    onesCol[j]++;
                    onesRow[i]++;
                }

            }
        }


        vector<vector<int>> diff(n,vector<int>(m,0));

        for(int i=0;i<n;i++){ 
            for(int j=0;j<m;j++){
                
                diff[i][j] = 2 * onesRow[i] + 2 * onesCol[j] - m - n;
            }   
        }

        return diff;
    }
};



// Number of 0s in a row = total columns - number of 1s in that row

// Number of 0s in a column = total rows - number of 1s in that column

// So the final value for each cell (i, j) becomes:

// 2 * rowOnes[i] + 2 * colOnes[j] - (m + n)
