problem :

Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such 
that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

 

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Example 2:

Input: nums = []
Output: []

///////////method-1


class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
   
        if(nums.size()<3) return {};
        
        
        vector<vector<int>> res;
        //sort
        sort(nums.begin(),nums.end());
        
       
        for(int i = 0; i < nums.size()-2;i++){
           
             // all numbers from now on will be greater than 0, 
            //no point in continuing since the array is sorted
            if(nums[i]>0) break;
            
            
            	// we have seen this number & combo before; skip
            //eg:if we have [-1 -1 4 -3]
            //[-1 4 3] pair 1
            //pair 2 also will be [-1 4 -3]
            if(i > 0 && nums[i]==nums[i-1])
                continue;
            
            
            
            int l = i + 1; 
            int r = nums.size() - 1; 
           
            
            while (l < r) {    
                
                int sum = nums[i]+nums[l]+nums[r];
                
                if (sum == 0) {
                    res.push_back({nums[i],nums[l],nums[r]});
                    
                    
        // we have seen this number & combo before;                                   skip
                //eg:we had [-1  -2 -2 -4  5 3  3  ]
                    //we have [-1 -2 3]
                    //now we should not stop once we got a combo because 
                    //here we want all unique combos
                    //now with -1  we have to check for diff pairs we have skip all -2's and 3's here
                    //nxt combo [-1 -4 5]
                    
                    
                    
                    //to handle duplicates
                    while (l<r && nums[l] == nums[l+1]) 
                        l++;
                    // to handle duplicates
                    while (l<r && nums[r] == nums[r-1]) 
                        r--;
                    
                    
                    l++;
                    r--;
                    //break;
                }
                
                
                // If sum of three elements is less 
                // than zero then increment in left 
                else if (sum < 0) 
                    l++; 
  
                // if sum is greater than zero than 
                // decrement in right side 
                else
                    r--; 
            }
                
        }
        return res;
    }
};

















