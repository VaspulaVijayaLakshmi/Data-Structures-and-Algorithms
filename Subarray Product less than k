Given an array of integers nums and an integer k, return the number of contiguous 
subarrays where the product of all the elements in the subarray is strictly less than k.

 

Example 1:

Input: nums = [10,5,2,6], k = 100
Output: 8
Explanation: The 8 subarrays that have product less than 100 are:
[10], [5], [2], [6], [10, 5], [5, 2], [2, 6], [5, 2, 6]
Note that [10, 5, 2] is not included as the product of 100 is not strictly less than k.
Example 2:

Input: nums = [1,2,3], k = 0
Output: 0
 

Constraints:

1 <= nums.length <= 3 * 104
1 <= nums[i] <= 1000
0 <= k <= 106




class Solution {
public:
    
    
    //sliding window only works for non neg numbers
    int numSubarrayProductLessThanK(vector<int>& nums, int k) {
       
        if (k <= 1) return 0;
        
        
        int prod = 1, ans = 0, left = 0;
        
        for (int right = 0; right < nums.size(); right++) {
           
            //expand window
            prod *= nums[right];
            
            //if product is greater than k,shrink the window 
            //from left side
            while (prod >= k) prod /= nums[left++];
            
            //this is difficult to come up with
            ans += right - left + 1;
        }
        return ans;
    }
};


// why ans += right - left + 1....

//  let's use the example nums = [10,5,2,6]:

// If we start at the 0th index, [10,5,2,6], 
// the number of intervals is obviously 1.
    
// If we move to the 1st index, the window is now [10,5,2,6]. 
//     The new intervals created are [5] and [10,5], so we add 2.
    
    
// Now, expand the window to the 2nd index: [10,5,2,6]. 
//     The new intervals are [2], [5,2], and [10,5,2], so we add 3.
    
    
// The pattern should be obvious by now; we add right - left + 1 to the output variable every loop!
