Given an m x n matrix, return all elements of the matrix in spiral order.

Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [1,2,3,6,9,8,7,4,5]

Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]



class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& m) {
       
        int rows=m.size()-1;
        int col=m[0].size()-1;
        
        int top=0,bottom=rows;
        int left=0,right=col;
        
        vector<int> res;
        
        
        while(top<=bottom && left<=right){
            
         //left to right   
        for(int i=left;i<=right;i++){
            res.push_back(m[top][i]);
        }
        top++;
        
        
          //top to bottom
        for(int i=top;i<=bottom;i++){
            res.push_back(m[i][right]);
        }
        right--;
        
        
       //right to left 
        if(top<=bottom){
            
          for(int i=right;i>=left;i--){
            res.push_back(m[bottom][i]);
           }
        }  
        
         //if top > bottom,   then bottom,then in bottom--
         //this will be checked in while loop and will break the loop   
            bottom--;
        
        
            
        //bottom to top    
        if(left<=right){
            
          for(int i=bottom;i>=top;i--){
            res.push_back(m[i][left]);
          }
            
        }  
          left++;  
            
           
            
        }
        return res;
            
    }
};
