class Solution{
public:	

   int first(int arr[] , int n , int x){
int start = 0;
int end = n -1;
int res = -1;
while(start <= end){
int mid = start + end - start / 2;
if(x == arr[mid]){
res = mid;
end = mid - 1;
}
else if(x < arr[mid])
end = mid - 1;
else
start = mid + 1;
}
return res;
}


int last(int arr[] , int n , int x){
int start = 0;
int end = n -1;
int res = -1;
while(start <= end){
int mid = start + end - start / 2;
if(x == arr[mid]){
res = mid;
start = mid + 1;
}
else if(x < arr[mid])
end = mid -1;
else
start = mid + 1;
}
return res;
}



	/* if x is present in arr[] then returns the count
		of occurrences of x, otherwise returns 0. */
	int count(int arr[], int n, int x) {
	  
	 int l= last(arr,n,x);
	 int f=first(arr,n,x);
	   if(l == -1 && f == -1)
        return 0;
        return l- f+ 1;
	    
	    
	}
};
