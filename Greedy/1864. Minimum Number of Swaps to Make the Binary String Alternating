https://leetcode.com/problems/minimum-number-of-swaps-to-make-the-binary-string-alternating/description/

class Solution {
private:
    int count(string& s, char c) {
        int miss = 0;
        for (int i = 0; i < s.length(); i += 2) {
            if (s[i] != c) miss++;
        }
        return miss;
    }
public:
    int minSwaps(string s) {
        
        int cnt0 = 0, cnt1 = 0;
        for (char c : s) c == '0'? cnt0 += 1 : cnt1 += 1;

        if (abs(cnt0 - cnt1) > 1) return -1;
        
        if (cnt0 > cnt1) return count(s, '0');
        if (cnt0 < cnt1) return count(s, '1');

        return min(count(s, '0'), count(s, '1'));
    }
};


// If a string can be changed into the alternating form, the number of 0s (cnt0) and 1s (cnt0) should be either

// equal
// cnt0 - cnt1 = 1
// cnt1 - cnt0 = 1

// If we have more 0s, the first character must be 0.
// If we have more 1s, the first character must be 1.
// Else, the first character can be either case.

// Starting with the first character, we check the index of (0, 2, 4, ...) 
// to see if they are the same as the first character. 
// If not, they are miss placed. And the total miss placed characters are the number of swaps.




// Alternating means starts with 0 and 1


// starting with 1 : 

// Possible 
// [1 0 1 0 1 0]
//  0 1 2 3 4 5

// [1 1 1 0 0 0]
//  0 1 2 3 4 5




// starting wiht 0 : 


// Possible 
// [1 1 1 0 0 0]
//  0 1 2 3 4 5

// [0 1 0 1 0 1]
//  0 1 2 3 4 5

