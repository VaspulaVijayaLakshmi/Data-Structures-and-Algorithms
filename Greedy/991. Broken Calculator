TLE

#include <bits/stdc++.h>
using namespace std;

class Solution {
public:
    int brokenCalc(int startValue, int target) {
        queue<int> q;
        unordered_set<int> vis;

        q.push(startValue);
        int steps = 0;

        while (!q.empty()) {
            int sz = q.size();
            while (sz--) {
                int cur = q.front();
                q.pop();

                //also vis should be set
                //because we dont know all the eleents we are goijg to se
                if (vis.count(cur)) continue; // already processed
                vis.insert(cur);

                if (cur == target) return steps;

                if (cur - 1 > 0) q.push(cur - 1);
                //mostly go till target*2 at max
                if (cur < target * 2) q.push(cur * 2);
            }
            steps++;
        }
        return steps;
    }
};




// if we at 5 - i have 2 options (4 or 10)
// then from 4 i habe 2 options - (3 or 8)

// i have reached target

// this is bfs.



// Can go negative (front-1 when front == 0) â€” which will spiral infinitely.
// Will keep visiting the same numbers again and again without a visited set.
// Uses long long correctly for big numbers, but still explores way too much.
