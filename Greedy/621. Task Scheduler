class Solution {
public:
    int leastInterval(vector<char>& tasks, int p) {
        int n = tasks.size();
        
        if(p == 0)
            return n;
    
        int counter[26] = {0};
        for(char &ch : tasks) {
            counter[ch-'A']++;
        }
        
        sort(begin(counter), end(counter));
        
        //place the highest freq character, 
        //and calculate the chunks
        int chunks = counter[25]-1;
        int idolSpots  = chunks*p;

        for(int i = 24; i>=0 ; i--) {

            // if gadde are less than char freq,
            // then  add a new slot, or else 


            // eg: A-3 ,  B-3 , n=3

            // idleslot = 3*2 = 6
            // A _ _ _ A _ _ _ A
            // A B _ _ A B _ _ A B

            // so how many occurences of B i can remove
            // there are 3 As. so we have n-1, slot  groups(Gaddhe)
            // so the no.of groups is 2 , but occurences of B is 2
              

            // idleSlots = idleSlots -  min(freq[i], slotGroups) - 6-2 =4
            // freq[i] = freq[i]-slotGroups=1
            // B - 1

            idolSpots -= min(chunks, counter[i]);

        }

        if(idolSpots > 0)
            return n + idolSpots;
    
        // If at the end idol spots is 0, it means all idol spots were enough
        // to accomodate all other taks. So, out result will be tasks.size();    
        return n;
    }
};



// n=1

// A - 2
// B - 2
// C - 1
// D - 1


// SO max ones i need to allot

// now A, B has 2 freq
// n=1


// A B A B then C and D can be placed anywhere


// A-3
// b-3
// n=2

// A B _ A B _ A B
// B A _ B A - B A
// others extras can be placed innthese gaps or end

//  AAABBB n=3




//  same occurences so i pick A - 3 and its gap should be 3 - 9 slots


// so calulate after placing A how mnay slots are empty

// A - 3
// n=3
// so slots = 3*3 =9
// Empty slots = 9-3 = 6


// Now how many slots does B need - 3 and n=3
// so B need not compleetly wait for 3 slots, it can stop for 2 slots , 3rd slot will be by A and 4th slot it can take over

// so B needs 6 slots, which >= available slots, so we need extra slot .

// INSTEAD OF SLOTS - CONSIDER SLOT GROUPS


// but AFter i put B , i will have 2 slots only left, so
// if 


//  A _ _ _ A _ _ _ A

//  now place B

//  A B _ _ A B _ _ A B 



//now lets say we have A-3, B-3, C-3 ,  n=3

// A _ _ _ A _ _ _ A

// A B _  A B _  A B

// A B C _ A B C _ A B C



// Now lets say we have A-3 B-3 C-2, n=3

// A _ _ _ A _ _ _ A =  9 slots , available - 6, n=3
 

// A B _ _ A B _ _ A B = 

// B need 6 slots, but its +1 now , so 10 slots, n=2 is enough becuase3rd one can be filled with A
// and B can continue


// C - 2 , 4 slots vailable, and it needs gap of 3
// here n cn be 1 , becuse Next 2 cn be filed with A, B



// A B C _ A B C _ A B 




// Greedy

// https://www.youtube.com/watch?v=QDsFBLGL9MM&list=PLpIkg8OmuX-J8_n8Vy9P9I3KvyDcPMzRU&index=31

// HEAP
// https://www.youtube.com/watch?v=rYh-Kkbzsnw&list=PLpIkg8OmuX-IkxvvfOeZp-Ot0UWHMGAT-&index=14

