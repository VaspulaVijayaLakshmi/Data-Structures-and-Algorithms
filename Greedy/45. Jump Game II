// class Solution {
// public:
//     int jump(vector<int>& nums) {

//         int n=nums.size();
//         vector<int> dp(n,INT_MAX);

//         // dp[i] stores the min No.of steps to reach the ith step 
//          dp[0] = 0;

//          for(int i=0;i<n;i++){

//             // min of n because, we need to make sure we are within bounds.
//             int farthestStep = min(n-1,i+nums[i]);

//             for(int j=i+1;j<=farthestStep;j++){

//                 // all the steps from i+1 to farthest, are 1 step 
//                 // more than curr idx 'i'
//                 dp[j] = min(dp[j],1+dp[i]);

//             }
//          }

//         return dp[n-1];
        
//     }
// };



// GREEDY

class Solution {
public:
    int jump(vector<int>& nums) {
        int n = nums.size();
        int l = 0, r = 0, jumps = 0;
        while(r < n-1){
            int farthest = 0;
            for(int i=l;i<=r;i++){
                farthest = max(farthest, nums[i]+i);
            }
            l = r+1;
            r = farthest;
            jumps += 1;
        }
        return jumps;
    }
};
