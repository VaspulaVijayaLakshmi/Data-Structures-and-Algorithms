class Solution {
public:
    int eliminateMaximum(vector<int>& dist, vector<int>& speed) {
    for (int i = 0; i < dist.size(); ++i)
        dist[i] = (dist[i] - 1) / speed[i];
    sort(begin(dist), end(dist));
    for (int i = 0; i < dist.size(); ++i)
        if (i > dist[i])
            return i;
    return dist.size();
} 
};

//try to eliminate

//  nearest monetsers first or fastest one?

//  speed = dis*time

//  time = speed/dis

// dist = [3,2,4]
// speed = [5,3,2]

    

//       first monster is always killed.
//       3/2 - 1.0....but if speed is 3 and its at dis 2 , then it will reach 
//       0, so if 3%2!=0 , then do 3/2-1


// once we find all those, then sort the times, then kill monsters




// https://leetcode.com/problems/eliminate-maximum-number-of-monsters/solutions/6999799/c-clear-and-efficient-solution-beats-97-63/



// 1.Calculate Time to Reach:

// For each monster, compute the minute it will reach the city:
// (dist[i] - 1) / speed[i]

// This ensures that monsters arriving during the current minute are considered "safe to eliminate" in that minute.

// 2.Sort Arrival Times:
// Sort the arrival times so we can eliminate monsters in the correct order.

// 3.Simulate Elimination:

// Eliminate one monster per minute (i = 0, 1, 2, ...)

// If i > dist[i], it means a monster has arrived before we could eliminate it, so we return i.

// 4.All Eliminated Successfully:
// If no monster arrives too early, return n.

        
