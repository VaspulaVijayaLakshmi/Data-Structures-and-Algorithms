class Solution {
public:
    long long numberOfWeeks(vector<int>& milestones) {
        long long total = 0;
        int mostFreq = 0;

        for (int i = 0; i < milestones.size(); i++) {
            total += milestones[i];
            if (milestones[i] > milestones[mostFreq])
                mostFreq = i;
        }

        // if max project is too large, we can't finish all milestones
        //only a part of it

        //  total-> sum+1/2

        if (2LL * milestones[mostFreq] - 1 > total)
            return (total - milestones[mostFreq]) * 2 + 1;

            //if there is a majority element 
            // milestones = [5,2,1]
            // 0 1 0 1 0 2 0 _ 0

            // so we will remove the max freq element

            // 1 1 2 -> now we will have few spots
            // _ 1 _ 1 _ 2 _ ->  how many spots we had->  
            // how many remaining tasks - total-maxfreq 
            // 3* we will have 3*2+1 spots.


        // otherwise we can finish everything
        return total;
    }
};



// 0 - 1
// 1 - 2
// 2 - 3


// 2 _ 2 _ 2
// 2 1 2 1 2
// 2 1 2 1 2 0


// milestones = [5,2,1]

// 0 _ 0 _ 0 _ 0 _ 0
// 0 1 0 1 0 _ 0 _ 0
// 0 1 0 1 0 2 0 _ 0

// but we cant work on last 0 (milestone, because i took a break)

// because of 1st constrint  you will finish exactly one milestone of one project, each week


