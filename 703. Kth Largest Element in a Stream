Design a class to find the kth largest element in a stream. Note that it is the kth largest 
element in the sorted order, not the kth distinct element.

Implement KthLargest class:

KthLargest(int k, int[] nums) Initializes the object with the integer k and the stream of integers nums.
int add(int val) Appends the integer val to the stream and returns the element representing the kth largest element in the stream.
 

Example 1:

Input

[    "KthLargest",        "add",  "add",  "add",   "add",   "add"]

[   [3, [4, 5, 8, 2]],     [3],    [5],     [10],   [9],     [4]]


Output
[null, 4, 5, 5, 8, 8]

Explanation
->[0] KthLargest kthLargest = new KthLargest(3, [4, 5, 8, 2]);

->[1]  kthLargest.add(3);   // return 4
->[2]  kthLargest.add(5);   // return 5
->[3]  kthLargest.add(10);  // return 5
->[4]  kthLargest.add(9);   // return 8
->[5]  kthLargest.add(4);   // return 8




class KthLargest {
public:
    
    
    int n;
    priority_queue<int,vector<int>,greater<int>> q;
    
    
    KthLargest(int k, vector<int>& nums) {
       
       n=k;
       for(int i=0;i<nums.size();i++){
          
           q.push(nums[i]);
            
           if(q.size()>k)
               q.pop();
           
       }
    }
    
    
    int add(int val) {
        
        q.push(val);
        
       if(q.size()>n){
            q.pop();
        }
        
        return q.top();
        
    }
};

/**
 * Your KthLargest object will be instantiated and called as such:
 * KthLargest* obj = new KthLargest(k, nums);
 * int param_1 = obj->add(val);
 */



  
