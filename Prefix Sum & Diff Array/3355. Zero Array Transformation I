class Solution {
public:
    bool isZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        vector<int> diff(nums.size(), 0);
        for (const auto& q : queries) {
            diff[q[0]]++; // diff[l]++
            if (q[1] + 1 < nums.size())
                diff[q[1] + 1]--; // diff[r + 1]--
        }

        int cnt = 0;
        for (int i = 0; i < nums.size(); i++) {
            cnt += diff[i];
            if (nums[i] > cnt)
                return false;
        }
        return true;
    }
};


// [4,3,2,1]
// queries = [[1,3],[0,2]]


// 1-3 -decremened once
// 0-2 - decremented 

// 0,1,2,3
// [1,2,2,1]

// 1 and 2 idex overlapped in both so they will be incremneted 2 times

// so I need to preprocess queries - with prefix sum or something nd see the no.of times i cn decrement, if no.of times i cn drecremment is > = nums[i], then yes tt can be transofermed to 0.


// queries = [[1,3],[0,2]]

//  0,1,2,3
// [0,0,0,0]

// Differnce array + Prefix sum








