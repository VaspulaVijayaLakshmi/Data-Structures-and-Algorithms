Given an array of positive integers nums and a positive integer target, 
return the minimal length of a contiguous subarray 
[numsl, numsl+1, ..., numsr-1, numsr] 
of which the sum is greater than or equal to target. 
If there is no such subarray, return 0 instead.

 


  //this only works for all positive intergers.
    
    // [2,7,3,-8,4,10] target=12
    // consider this 
    //[2+7+3]  13>13 so size of window (end-strt+1) = 2-0+1=2
     //now until sum<12 shrink the window
   // so strt++
    // now window is [7,3] sum<12 so expand the window 
    //[7,3,-8] =2<12
    //[7,3,-8,4]=6<12
    //[7,3,-8,4,10] 16>12 window size=(5-1+1)=5
    
    //so min size window = 3
    // but we have subarray [4,10]=14>12 size=2
    //but our sliding window will not reach this.





Example 1:

Input: target = 7, nums = [2,3,1,2,4,3]
Output: 2
Explanation: The subarray [4,3] has the minimal length under the problem constraint.




Example 2:

Input: target = 4, nums = [1,4,4]
Output: 1



Example 3:

Input: target = 11, nums = [1,1,1,1,1,1,1,1]
Output: 0


class Solution {
public:
    int minSubArrayLen(int target, vector<int>& nums) {
        
        int n=nums.size();
        int strt=0,end=0;;
        int currSum=0;
        int min_window=INT_MAX;
        
        for(int end=0;end<n;end++){
            
            currSum+=nums[end];
            
            
            while(currSum >=  target){
               
                min_window=min( min_window , end-strt+1 ); 
                currSum=currSum-nums[strt];
                strt++;
            }
            
        }
        
         return min_window == INT_MAX? 0 : min_window;
        
    }
};

