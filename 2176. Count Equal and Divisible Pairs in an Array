Given a 0-indexed integer array nums of length n and an integer k,
return the number of pairs (i, j) where 0 <= i < j < n, 
such that nums[i] == nums[j] and (i * j) is divisible by k.
 

Example 1:

Input: nums = [3,1,2,2,2,1,3], k = 2
Output: 4
Explanation:
There are 4 pairs that meet all the requirements:
- nums[0] == nums[6], and 0 * 6 == 0, which is divisible by 2.
- nums[2] == nums[3], and 2 * 3 == 6, which is divisible by 2.
- nums[2] == nums[4], and 2 * 4 == 8, which is divisible by 2.
- nums[3] == nums[4], and 3 * 4 == 12, which is divisible by 2.





Example 2:

Input: nums = [1,2,3,4], k = 1
Output: 0
Explanation: Since no value in nums is repeated,
there are no pairs (i,j) that meet all the requirements.





Inution:
class Solution {
public:
    int countPairs(vector<int>& nums, int k) {
       unordered_map<int,vector<int>> mp;
        
        int n=nums.size();
        int c=0;
        
        // there are repeating elements
        //so for every element(x) we need to check 
        // it with all the indices where x is present in the array 
        //if there is any index which is divisible by x.
        
        
        for(int i=0;i<n;i++){
        
            if( mp.find(nums[i]) != mp.end() ){
                
                for(int idx:mp[nums[i]] ){
                    
                    if(idx*i%k==0) c++;
                }
            }
            
            mp[nums[i]].push_back(i);
            
        }
        
        return c;
    }
};










