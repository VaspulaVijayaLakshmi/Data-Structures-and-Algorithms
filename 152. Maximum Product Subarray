Given an integer array nums, find a contiguous non-empty subarray within the array that has the largest product, and return the product.

The test cases are generated so that the answer will fit in a 32-bit integer.

A subarray is a contiguous subsequence of the array.

 

Example 1:

Input: nums = [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.


Example 2:

Input: nums = [-2,0,-1]
Output: 0
Explanation: The result cannot be 2, because [-2,-1] is not a subarray.






// class Solution {
// public:
//     int maxProduct(vector<int>& nums) {
       
//        int ans=INT_MIN;
//         int maxprod=1,minprod=1;
        
//         for(int n:nums){
            
            
         // multiplied by a negative makes big number smaller, small number bigger
        // so we redefine the extremums by swapping them
//             if(n<0) swap(maxprod,minprod);
            
            
             // max/min product for the current number is either the current number itself
        // or the max/min by the previous number times the current one
//             maxprod=max(maxprod*n,n);
//             minprod=min(minprod*n,n);
            
//             ans=max(ans,maxprod);
//         }
        
        
//         return ans; 
//     }
// };


class Solution {
public:
    int maxProduct(vector<int>& nums) {
       
         int n= nums.size();
         int ans=nums[0];

        
        int prev_max_prod=nums[0] , prev_min_prod=nums[0];
        
        int curr_max_prod=nums[0] , curr_min_prod=nums[0];
        
        
        for(int i=1;i<n;i++){
       
            curr_max_prod = max( max( curr_max_prod*nums[i] , prev_min_prod*nums[i] ) ,nums[i] );
            curr_min_prod = min( min( curr_min_prod*nums[i] , prev_max_prod*nums[i] ),nums[i] );
            
            ans = max(ans,curr_max_prod);
            
            prev_max_prod = curr_max_prod;
            prev_min_prod = curr_min_prod;    
            
        }
        
        
        return ans; 
    }
};




