Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]



Example 2:

Input: nums = [0,1]
Output: [[0,1],[1,0]]



Example 3:

Input: nums = [1]
Output: [[1]]



class Solution {
public:
      void dfs(int pos, vector<int> &num, vector<vector<int>> &result){
          
    if(pos == num.size()){
        result.push_back(num);
    }
    
        for(int i=pos; i<num.size(); i++){
            swap(num[i], num[pos]);
            dfs(pos+1, num, result);
            swap(num[i], num[pos]);
        }
    }
    
    
    
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> res;
        dfs(0,nums,res);
        
        return res;
    }
};



