class Solution{
public:
      
      bool isValid(vector<vector<int>> board,int row,int col,int n){
         
        //check in same col for every row 
        for(int i=0;i<row;i++){
            if(board[i][col]==1) 
             return false;
        }  
          
        //check in 135 degree diagonal  
        for(int i=row-1,j=col-1 ; i>=0 && j>=0 ;i--,j--){
           if(board[i][j]==1) 
             return false; 
        }  
        
        //check in 45 degree diagaonal
        for(int i=row-1,j=col+1 ; i>=0 && j<n ;i--,j++){
            if(board[i][j]==1) 
             return false;
        }
          
        return true;  
      }
      
      
      
      void solve(vector<vector<int>> &board, vector<vector<int>> &res, 
              int row,int n){
        
        if(row==n){
           
           vector<int> path; 
            
            for(int i=0;i<n;i++)
            for(int j=0;j<n;j++)
             if(board[i][j]==1)
              path.push_back(j+1);
        
            
            res.push_back(path);
            return;
        }
        
        
        for(int col=0;col<n;col++){
            
            if(isValid(board,row,col,n)){
                board[row][col]=1;
                solve(board,res,row+1,n);
                board[row][col]=0;
             }
        }
          
      }



    vector<vector<int>> nQueen(int n) {
  
        vector<vector<int>> res;
        vector<vector<int>> board(n,vector<int>(n,0));
        
        solve(board,res,0,n);
        return res;
        
    }
};
