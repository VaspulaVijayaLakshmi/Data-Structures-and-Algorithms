Find a triplet that sum to a given value

Given an array and a value, find if there is a triplet in array
whose sum is equal to the given value. If there is such a triplet present in array, 
then print the triplet and return true. Else return false.

Examples: 
 

Input: array = {12, 3, 4, 1, 6, 9}, sum = 24; 
Output: 12, 3, 9 
Explanation: There is a triplet (12, 3 and 9) present 
in the array whose sum is 24. 
Input: array = {1, 2, 3, 4, 5}, sum = 9 
Output: 5, 3, 1 
Explanation: There is a triplet (5, 3 and 1) present 
in the array whose sum is 9.

 
 //intuition
 
 brute force
 Approach: A simple method is to generate all possible triplets and compare
 the sum of every triplet with the given value. The following code implements this simple method using three nested loops.
Algorithm: 
Given an array of length n and a sum s
Create three nested loop first loop runs from start to end (loop counter i), second loop runs 
from i+1 to end (loop counter j) and third loop runs from j+1 to end (loop counter k)
The counter of these loops represents the index of 3 elements of the triplets.
Find the sum of ith, jth and kth element. If the sum is equal to given sum. Print the triplet and break.
If there is no triplet, then print that no triplet exist.


Complexity Analysis: 
Time Complexity: O(n3). 
There are three nested loops traversing the array, so the time complexity is O(n^3)
Space Complexity: O(1). 
As no extra space is required.




Approach: By Sorting the array the efficiency of the algorithm can be improved. 
This efficient approach uses the two-pointer technique. Traverse the array and fix the
first element of the triplet. Now use the Two Pointers algorithm to find if there is a pair whose sum 
is equal to x – array[i]. Two pointers algorithm take linear time so it is better than a nested loop.



Algorithm : 
Sort the given array.
Loop over the array and fix the first element of the possible triplet, arr[i].
Then fix two pointers, one at i + 1 and the other at n – 1. And look at the sum, 
If the sum is smaller than the required sum, increment the first pointer.
Else, If the sum is bigger, Decrease the end pointer to reduce the sum.
Else, if the sum of elements at two-pointer is equal to given sum then print the triplet and break.


Complexity Analysis: 
Time complexity: O(N^2)




// class Solution {
// public:
//     vector<vector<int>> threeSum(vector<int>& nums,target) {
   
//         if(nums.size()<3) return {};
        

//         sort(nums.begin(),nums.end());
        
       
//         for(int i = 0; i < nums.size()-2;i++){
           

//             int l = i + 1; 
//             int r = nums.size() - 1; 
           
            
//             while (l < r) {    
                
//                 int sum = nums[i]+nums[l]+nums[r];
                
//                 if (sum == target) {
//                    return true;
                   
//                 }
                
                
//                 // If sum of three elements is less 
//                 // than zero then increment in left 
//                 else if (sum < 0) 
//                     l++; 
  
//                 // if sum is greater than zero than 
//                 // decrement in right side 
//                 else
//                     r--; 
//             }
                
//         }
//         return false
//     }
// };
