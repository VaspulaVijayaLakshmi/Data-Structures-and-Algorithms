Given two strings s and p, return an array of all the start indices of p's anagrams in s.
You may return the answer in any order.

An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase,
typically using all the original letters exactly once.

 

Example 1:

Input: s = "cbaebabacd", p = "abc"
Output: [0,6]
Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".



Example 2:


Input: s = "abab", p = "ab"
Output: [0,1,2]
Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".








class Solution {
    
    bool areVectorsEqual(vector<int> a, vector<int> b){
        for(int i=0; i<26; i++){
            if(a[i]!=b[i]) return false;
        }
       
        return true;
    }
    
public:
    
    vector<int> findAnagrams(string s2,string s1) {
        
        if(s2.size()<s1.size()) return {};
        
        vector<int> freqS1(26, 0);
        for(char c: s1) freqS1[c-'a']++;
        
        vector<int> freqS2(26, 0);
        int i=0, j=0;
        vector<int> res;
        
        while(j<s2.size()){
            
            freqS2[s2[j]-'a']++;
            
            //if winsow size hits
            if(j-i+1==s1.size()){
             
                if(areVectorsEqual(freqS1, freqS2)) 
                   res.push_back(i); 
                    
            }
            
            //if window size is less
            if(j-i+1<s1.size()) j++;
            
            
            //shrink the window
            else{
                freqS2[s2[i]-'a']--;
                i++;
                j++;
            }
        }
        
        
        return res;
    }
};
