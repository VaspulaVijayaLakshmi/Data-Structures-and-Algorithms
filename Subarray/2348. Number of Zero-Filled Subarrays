Given an integer array nums, return the number of subarrays filled with 0.

A subarray is a contiguous non-empty sequence of elements within an array.

 

Example 1:

Input: nums = [1,3,0,0,2,0,0,4]
Output: 6
Explanation: 
There are 4 occurrences of [0] as a subarray.
There are 2 occurrences of [0,0] as a subarray.
There is no occurrence of a subarray with a size more than 2 filled with 0. Therefore, we return 6.



Example 2:

Input: nums = [0,0,0,2,0,0]
Output: 9
Explanation:
There are 5 occurrences of [0] as a subarray.
There are 3 occurrences of [0,0] as a subarray.
There is 1 occurrence of [0,0,0] as a subarray.
There is no occurrence of a subarray with a size more than 3 filled with 0. Therefore, we return 9.







class Solution {
public:
    long long zeroFilledSubarray(vector<int>& nums) {
        
        int n=nums.size();
        vector<int> dp(n,0);
        long long res=0;
        
        if(nums[0]==0){
            dp[0]=1;
            res=1;
        }
        
        for(int i=1;i<n;i++){
            
            if(nums[i]==0){
                dp[i]=dp[i-1]+1;
                res+=dp[i];
            }
        }
        
        return res;
        
    }
};

// nums=[1,3,0,0,2,0,0,4]
// dp=  [0,0,0,0,0,0,0,0]

//      [0,0,1,2,0,1,2,0]
     
// idx-2    [0]
// idx-3    [0] [0,0]
         
    
// idx-5      [0]
// idx-6      [0] [0,0]

// so we have total 6 subsets
     
    
    
