An integer array is called arithmetic if it consists of at least three elements and 
if the difference between any two consecutive elements is the same.

For example, [1,3,5,7,9], [7,7,7,7], and [3,-1,-5,-9] are arithmetic sequences.
Given an integer array nums, return the number of arithmetic subarrays of nums.

A subarray is a contiguous subsequence of the array.

 

Example 1:

Input: nums = [1,2,3,4]
Output: 3
Explanation: We have 3 arithmetic slices in nums: [1, 2, 3], [2, 3, 4] and [1,2,3,4] itself.


Example 2:

Input: nums = [1]
Output: 0




class Solution {
public:
    long long zeroFilledSubarray(vector<int>& nums) {
        
        int n=nums.size();
        vector<int> dp(n,0);
        long long res=0;
        
        if(nums[0]==0){
            dp[0]=1;
            res=1;
        }
        
        for(int i=1;i<n;i++){
            
            if(nums[i]==0){
                dp[i]=dp[i-1]+1;
                res+=dp[i];
            }
        }
        
        return res;
        
    }
};

// nums=[1,3,0,0,2,0,0,4]
// dp=  [0,0,0,0,0,0,0,0]

//      [0,0,1,2,0,1,2,0]
     
// idx-2    [0]
// idx-3    [0] [0,0]
         
    
// idx-5      [0]
// idx-6      [0] [0,0]

// so we have total 6 subsets
     
    
    
