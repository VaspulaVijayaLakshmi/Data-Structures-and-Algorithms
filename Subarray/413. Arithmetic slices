An integer array is called arithmetic if it consists of at least three elements and 
if the difference between any two consecutive elements is the same.

For example, [1,3,5,7,9], [7,7,7,7], and [3,-1,-5,-9] are arithmetic sequences.
Given an integer array nums, return the number of arithmetic subarrays of nums.

A subarray is a contiguous subsequence of the array.

 

Example 1:

Input: nums = [1,2,3,4]
Output: 3
Explanation: We have 3 arithmetic slices in nums: [1, 2, 3], [2, 3, 4] and [1,2,3,4] itself.


Example 2:

Input: nums = [1]
Output: 0




class Solution {
public:
    int numberOfArithmeticSlices(vector<int>& nums) {
        
        int n=nums.size();
        vector<int> dp(n,0);
        int ans=0;
        
        if(n<3) 
            return 0;
        
        for(int i=2;i<n;++i){
            
            if(nums[i]-nums[i-1] == nums[i-1]-nums[i-2]){
                dp[i]=dp[i-1]+1;
                ans+=dp[i];
            }
            
        }
        
        
        return ans;
    }
};




// For example we have [1,2,3] with 1 correct subset, and add 4 to it.
// That mean we got new subsets 1234 and 234

//so total subsets = [1,2,3] [2,3,4] [1,2,3,4]


// [1,2,3,4,5]
// Which subsets did we got? 12345, 2345, 345

// so for [1,2,3] we have 1 subarray
//        [1,2,3,4] we have [2,3,4] and [1,2,3,4]
        
//     so total =3




// Lets add on more digit, we had [1,2,3,4,5] with 6 correct subsets. 
//Now we will have [1,2,3,4,5,6].
           // dp = [0,0,1,2,3,4]

//                   123
//                   234  1234
//                   345  2345 12345
//                   456  3456 23456 123456    

                      
// dp = [0,0,1,2,3,4]                      

