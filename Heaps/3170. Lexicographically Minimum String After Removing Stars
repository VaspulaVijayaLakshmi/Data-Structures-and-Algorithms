class Solution {
public:
    string clearStars(string s) {

// map stores the char -  and its indices in string
        unordered_map<char, vector<int>> mp;
        unordered_set<int> toRemove;

        for(int i=0;i<s.length();i++){

            if(s[i]=='*'){

                for(char ch='a';ch<='z';ch++){

                    if(mp[ch].size()!=0){
                         toRemove.insert(mp[ch].back());
                        //  since tht index is used already pop it from map
                         mp[ch].pop_back();
                         break;   
                    }
                }

            }

            else{
                mp[s[i]].push_back(i);
            }
        }

        string res="";
        for(int i=0;i<s.length();i++){
               if( !toRemove.contains(i) && s[i]!= '*')
                 res+=s[i];
        }


        return res;
    }
};





// smallest to the left



// too complicated

// For every char we need to find smallest to left
// stack


// ______________________

// for very time , a * appears find chars from a-z..if any lement is found, delete it


// HASHMAP SOLUTION
// https://leetcode.com/problems/lexicographically-minimum-string-after-removing-stars/solutions/6818879/simple-c-solution-hash-map-min-heap/




MIN HEAP


class Solution {
public:
    string clearStars(string s) {

    //    we need min heap
    // with custom comparator, if chars are same
    // we sort based on larger indices

    struct Comparator{

       bool operator()(pair<int,int> &a,pair<int,int> &b){

            if(a.first==b.first){
                return b.second>a.second;

            }

// this is a min heap, so a only should come first
            return a.first>b.first;
        }
    };
    

    priority_queue<pair<int,int>, vector<pair<int,int>>, Comparator> pq;
    unordered_set<int> remove; 
    for(int i=0;i<s.length();i++){

        if(s[i]=='*'){


           if(!pq.empty()){
            auto top = pq.top();
            // pr.pop , becase conider tht index alreayd removed for tht give star
            pq.pop();
            remove.insert(top.second);
           }
        }

        else {
            pq.push({s[i],i});
        }


    }

    string res;
    for(int i=0;i<s.length();i++){

        if(s[i]!='*' && !remove.contains(i)){
            res+=s[i];
        }

    }

    return res;

    }

};








// We need to find the MIN HEAP

// at every star we need to fidn the min char to its left, so min char ot of the chars we already saw
// now if 2 indices are same, we can remove the one wih the latest index.
// because we want to form the  lexicigraphically smaller string.


// eg: abdac*

// now which one we will remove

// abdc
// bdac


// ******IMP
// abdc is only smallest string..so we need to keep , latest occuing ones



