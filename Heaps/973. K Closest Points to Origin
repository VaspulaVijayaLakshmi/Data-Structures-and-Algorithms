class Solution {
public:
    vector<vector<int>> kClosest(vector<vector<int>>& points, int k) {

        priority_queue< pair< int, vector<int> > > pq;

        for(int i=0;i<points.size();i++){

            int dis = points[i][0]*points[i][0] + points[i][1]*points[i][1] ;
            pq.push({dis,points[i]});


            if(pq.size()>k) 
            pq.pop();

        }

        vector<vector<int>> res;
        while(pq.size()>0){

            res.push_back(pq.top().second);
            pq.pop();

        }

        return res;

        
    }


};

// K closest point to origin

// i.e,  we calculate the Euclidean distance and store it in heap
// closets to orgin., means , smallest distance from origin
// 
