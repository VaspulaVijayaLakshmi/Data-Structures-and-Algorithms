
class Solution {
   
  public:
    
   class myComparator{
     
    public:    
    bool operator()(const pair<int, string>& a, const pair<int, string>& b){
        if(a.first==b.first)
        {
            return a.second<b.second;
        }
        return (a.first>b.first);
    }
    
    };

     
    vector<string> topKFrequent(vector<string>& words, int k) {
        
    unordered_map<string,int> mp;
    for(int i=0;i<words.size();i++)
        mp[words[i]]++;
       
        
        //comparator class ,instead of greater<int>
     priority_queue<pair<int,string>,
             vector<pair<int,string>>,
              myComparator> q;
        /* Since here we want to order the elements in a different way we will write our own custom comparator function */
  /* For defining our own comparator function we would have to declare it in the class as done above */
        
        
      for(auto itr:mp){
          q.push({itr.second,itr.first});
          if(q.size()>k) q.pop();
      }  
        
        vector<string> ans(k);
        int m = k-1;

     while(q.size() > 0) {
        ans[m--] = q.top().second;
        q.pop();
      }

      return ans;
        
    }
};


//  sorted by the frequency from highest to lowest
// Sort the words with the same frequency by their lexicographical order.
// if 2 words have same freq - we need to sort them lexicographically





// Encountered this question in a Google interview. 
// It was a bit different because you were supposed to read from a file
// and parse the lines. 
 
 
//  Logic was still the same. 
//  Use a Map to brute force or a Priority Queue for optimization. 
 
//  Initially was asked to retrieve the highest then the k highest.



// Input: words = ["i","love","leetcode","i","love","coding"],  k = 2
// Output: ["i","love"]


// "i" - 2
// "love" - 2

// so both frequncies are similar
// but 'I' comes before 'Love' in lexicigraphical order.




// You have a heap (priority queue) storing words and their frequencies, and it's sorted by frequency.

// When two frequencies are the same, 
// you want a consistent tie-breaker, like sorting alphabetically (or in reverse, etc.)

// Default Behavior
// If you don’t handle tie-breaks explicitly, 
// the ordering of words with the same frequency is undefined — depends
//  on insertion order or internal logic (non-deterministic for our purposes).



// So we write a custom comparator
