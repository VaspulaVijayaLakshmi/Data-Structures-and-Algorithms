class Solution {
public:
    int maximumProduct(vector<int>& nums, int k) {

      priority_queue<int, vector<int>, greater<int>> pq;

        for(int i=0;i<nums.size();i++)
           pq.push(nums[i]);
        

         while(k>0){
            int top = pq.top();
            pq.pop();
            pq.push(top+1);
            k--;
         }
         

        long long op = 1;
        int mod = 1e9 + 7;

         while(!pq.empty())  {
           op = (op % mod) * (pq.top() % mod) % mod;
            pq.pop();
         }

         return op % mod;
        
    }
};

// [0,4] k=5

// [1,4] - 4
// [2,4] - 8         [1,5] - 5
// [3,4] - 12        [2,4] - 8
// [4,4] - 16        [3,4] - 12
// [5,4] - 20        [4,4] - 16


// If you can increment only once, which number should you increment?
// instead of increasing the larger number, 
// increase the smaller number to bring it closer to larger numer
