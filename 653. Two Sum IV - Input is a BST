Given the root of a Binary Search Tree and a target number k, return true 
if there exist two elements in the BST such that their sum is equal to the given target.

Input: root = [5,3,6,2,4,null,7], k = 9
Output: true

Input: root = [5,3,6,2,4,null,7], k = 28
Output: false


class Solution {
    
    private: unordered_set<int> st;
     
public:
    
    bool findTarget(TreeNode* root, int k) {
      if(root==NULL) return false;
       
        if(st.count(k-root->val))return true;
        st.insert(root->val);
        
       return findTarget(root->left,k) || 
             findTarget(root->right,k);
        
    }
};








Second Solution - Inorder Traversal + Two Pointers

Use inorder traversal to get a sorted vector of all the tree's values.
Then use two-pointer approach to find a two sum.

class Solution {
public:
    void inorder(TreeNode* root) {
        if (!root) return;
        inorder(root->left);
        vec.push_back(root->val);
        inorder(root->right);
    }
    
    bool findTarget(TreeNode* root, int k) {
        inorder(root);
        int l = 0, r = vec.size()-1;
        while (l < r) {
            if (vec[l] + vec[r] == k) return true;
            else {
                if (vec[l] + vec[r] < k) l++;
                else r--;
            }
        }
        return false;
    }
    
private:
    vector<int> vec;
};
