In a gold mine grid of size m x n, each cell in this mine has an integer representing the amount of gold in that cell, 0 if it is empty.

Return the maximum amount of gold you can collect under the conditions:

Every time you are located in a cell you will collect all the gold in that cell.
From your position, you can walk one step to the left, right, up, or down.
You can't visit the same cell more than once.
Never visit a cell with 0 gold.
You can start and stop collecting gold from any position in the grid that has some gold.
 

Example 1:

Input: grid = [[0,6,0],[5,8,7],[0,9,0]]
Output: 24
Explanation:
[[0,6,0],
 [5,8,7],
 [0,9,0]]
Path to get the maximum gold, 9 -> 8 -> 7.
Example 2:

Input: grid = [[1,0,7],[2,0,6],[3,4,5],[0,3,0],[9,0,20]]
Output: 28
Explanation:
[[1,0,7],
 [2,0,6],
 [3,4,5],
 [0,3,0],
 [9,0,20]]
Path to get the maximum gold, 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7.
 




static vector<int> xd={0,0,-1,1};
static vector<int> yd={-1,1,0,0};

class Solution {
    
public:
    
    int dfs(vector<vector<int>> &grid,int i,int j)
    {
        int x,y,temp=grid[i][j],result=0;
        
        grid[i][j]=0;
        
        for(int d=0;d<4;d++)                    //Try all 4 possible directions
        {
            x=i+xd[d];
            y=j+yd[d];
            
            if( x>=0 && y>=0  &&  x<grid.size()  && y<grid[x].size() && grid[x][y]!=0)
                
                result=max(result,grid[x][y]+dfs(grid,x,y));  
            //Set grid[i][j] to 0 to mark as visited before next 
            //dfs and reset the values after the dfs ends
        }
        
        
        grid[i][j]=temp;
        
        return result;
    }
    
    
    
    int getMaximumGold(vector<vector<int>>& grid) 
    {
        int result=0;
        
        for(int i=0;i<grid.size();i++)
            
            for(int j=0;j<grid[i].size();j++)
                
                if(grid[i][j]>0)
                    result=max(grid[i][j]+dfs(grid,i,j),result);  
        
        
        //Set grid[i][j] to 0 to mark this cell as visited and reset after the dfs ends.
        
        return result;
    }
    
};





Complexity
n being the number of elements in matrix.
Space: O(n) for the algorithm. O(1) for this question. Since the depth of recursion can go upto max 25 cells
Time: O(4^n) for the algorithm (Although I would argue that complexity is O(3^n) as each cell after the first would just have 3 choices at max.), 
O(1) for this question. Since the question states that there are at most 25 cells with gold.
