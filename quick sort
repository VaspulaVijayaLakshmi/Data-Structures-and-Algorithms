problem link:
https://practice.geeksforgeeks.org/problems/quick-sort/1

problem:
Quick Sort is a Divide and Conquer algorithm. It picks an element as pivot and 
partitions the given array around the picked pivot.
Given an array arr[], its starting position low and its ending position high.

Implement the partition() and quickSort() functions to sort the array.


Example 1:

Input: 
N = 5 
arr[] = { 4, 1, 3, 9, 7}
Output:
1 3 4 7 9
Example 2:

Input: 
N = 9
arr[] = { 2, 1, 6, 10, 4, 1, 3, 9, 7}
Output:
1 1 2 3 4 6 7 9 10





class solution
{
    public:
    //Function to sort an array using quick sort algorithm.
    void quickSort(int arr[], int low, int high)
    {
        // code here
        if(low<high){
            
            int pivot=partition(arr,low,high);
            quickSort(arr,low,pivot-1);
            quickSort(arr,pivot+1,high);
            
            
        }
    }
    
    public:
    int partition (int a[], int low, int end)
    {
       // Your code here
       int pivot=a[end];
       int pIndex=low;
       
       for(int i=low;i<end;i++){
           
           if(a[i]<=pivot){
               swap(a[i],a[pIndex]);
               pIndex++;
           }
           
       }
       swap(a[pIndex],a[end]);
       return pIndex;
    }
};
