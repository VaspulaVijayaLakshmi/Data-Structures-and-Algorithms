https://vaheaslanyan7.medium.com/the-java-interview-prep-handbook-50-questions-solved-code-examples-62fed44e3e6a



# ☕ Java Interview Checklist

A structured checklist to revise **Java concepts** before interviews.

---

## 1. Core Java
- JVM, JRE, JDK → differences and roles  
- Compilation process → `.java → .class → bytecode → JVM`  
- `finalize()` method → purpose & why discouraged  
- Access modifiers → `public`, `protected`, `default`, `private`  
- Packages → organization & visibility control  
- Exception handling → `try-catch-finally`, multiple catch blocks, try-with-resources  
- `transient` keyword → skipping sensitive info during serialization  
- `super` keyword → accessing parent methods/constructors  
- Checked vs Unchecked Exceptions  
- Generics → type safety, compile-time checks  
- Inheritance → multilevel vs multiple (interfaces)  
- Interfaces → default & static methods  
- `volatile` keyword → visibility guarantee, no atomicity  
- Synchronization  
  - Synchronized method vs synchronized block  
  - Intrinsic locks & ReentrantLock  
- Garbage Collection (GC)  
  - Reference types: strong, soft, weak, phantom  
  - Memory leaks & prevention  
- Threads  
  - Lifecycle (`NEW → RUNNABLE → RUNNING → WAITING/BLOCKED → TERMINATED`)  
  - Creating threads (`Thread` vs `Runnable` vs `Callable`)  
  - `run()` vs `start()` difference  
  - Thread safety  
- Iterators → fail-fast vs fail-safe  

---

## 2. Collections Framework
- List → ArrayList, LinkedList, Vector, Stack  
- Set → HashSet, LinkedHashSet, TreeSet  
- Queue → PriorityQueue, ArrayDeque  
- Map → HashMap, LinkedHashMap, TreeMap, Hashtable, ConcurrentHashMap  
- Tree-based collections → Red-Black Tree (TreeMap/TreeSet)  
- Dynamic Arrays → ArrayList internal working  

---

## 3. Multithreading & Concurrency
- Thread basics → `Thread` class, `Runnable` interface  
- Thread lifecycle → states & transitions  
- Synchronization → methods, blocks, Locks  
- ReentrantLock  
  - `lock()`, `unlock()`  
  - `tryLock()` (timed & immediate)  
  - fairness policies  
  - Conditions (`await()`, `signal()`)  
- volatile vs synchronized  
- Deadlocks → causes, detection, prevention strategies (ordering, timeout, detection tools)  
- ThreadPool & ExecutorService → usage, benefits over manual thread mgmt  
- Concurrent Collections → CopyOnWriteArrayList, ConcurrentHashMap, BlockingQueue  

---

## 4. Commonly Asked Java Topics
- Strings → String (immutable), StringBuffer (mutable, synchronized), StringBuilder (mutable, non-synchronized)  
- Immutable objects → why & how to create  
- `hashCode()` and `equals()` → contract, importance in HashMap/HashSet  
- Java 8+ features  
  - Lambda expressions  
  - Streams API (map, filter, reduce, collect)  
  - Optional class  
  - Method references  
- Design Patterns (basics)  
  - Singleton  
  - Factory  
  - Observer  
- OOP principles  
  - Polymorphism  
  - Inheritance  
  - Abstraction  
  - Encapsulation  

---

## ⚡ Pro Tips
- Don’t just memorize — prepare **examples, use-cases, and pitfalls**.  
- Know *why* certain features exist (e.g., why `volatile` isn’t enough for atomic ops, why `HashMap` needs proper `hashCode()` & `equals()`).  
- Practice writing short code snippets for tricky areas (threads, collections, GC).  

---
