//MAx Heap
class Solution
{
    public:
    //Function to return k largest elements from an array.
    vector<int> kLargest(int arr[], int n, int k)
    {
        // code here
        priority_queue<int> q;
        vector<int> v;
        for(int i=0;i<n;i++){
            q.push(arr[i]);
        }
        
        while(!q.empty() &&k>0){
            v.push_back(q.top());
            q.pop();
            k--;
        }
        return v;
    }
};




//MIN hEAP
 //Function to return k largest elements from an array.
    vector<int> kLargest(int arr[], int n, int k)
    {
      vector<int> res;
      priority_queue<int,vector<int>,greater<int>> pq;
      
      for(int i=0;i<n;i++){
          
          pq.push(arr[i]);
          
          if(pq.size()>k){
                 pq.pop();
                  
          }
      }
      
      
      while(!pq.empty()){
          res.push_back(pq.top());
          pq.pop();
      }
      
      sort(res.begin(),res.end(),greater<int>());
      return res;
       
       
       
        
    }};
