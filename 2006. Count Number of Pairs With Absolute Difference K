Given an integer array nums and an integer k, return the number of pairs (i, j) where i < j such that |nums[i] - nums[j]| == k.

The value of |x| is defined as:

x if x >= 0.
-x if x < 0.
 

Example 1:

Input: nums = [1,2,2,1], k = 1
Output: 4
Explanation: The pairs with an absolute difference of 1 are:
- [1,2,2,1]
- [1,2,2,1]
- [1,2,2,1]
- [1,2,2,1]





Example 2:

Input: nums = [1,3], k = 3
Output: 0
Explanation: There are no pairs with an absolute difference of 3.




Example 3:

Input: nums = [3,2,1,5,4], k = 2
Output: 3
Explanation: The pairs with an absolute difference of 2 are:
- [3,2,1,5,4]
- [3,2,1,5,4]
- [3,2,1,5,4]




class Solution {
public:
    int countKDifference(vector<int>& nums, int k) {
        
        int c=0;
        unordered_map<int,int> mp;
        
        for(int i=0;i<nums.size();i++){
            
            int target1=nums[i]+k;
            int target2=nums[i]-k;
            
            
            if( mp[target1] )
                c+=mp[target1];
            
            if( mp[target2] )
                c+=mp[target2];
            
            
            mp[nums[i]]++;
                
        }
        
        return c;
        
    }
};



//This is the constarint 
//  |nums[i] - nums[j]| == k
// ===> if we take out mod symbol

// then nums[i]-nums[j]= +-k

//so we need to check if nums[j] = (nums[i]-k) ( if k is positive)
//                       nums[j] = (nums[i]+k) (if k is negative)



         
          
