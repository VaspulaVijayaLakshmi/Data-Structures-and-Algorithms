problem link: https://leetcode.com/problems/container-with-most-water/



problem description:

You are given an integer array height of length n. 
There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).

Find two lines that together with the x-axis form a container, 
such that the container contains the most water.

Return the maximum amount of water a container can store.

Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49

Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. 
In this case, the max area of water (blue section) the container can contain is 49.



intution:
Start by evaluating the widest container, using the first and the last line.
All other possible containers are less wide, so to hold more water, they need to be higher.

--->The widest container (using first and last line) is a good candidate, because of its width. 
    Its water level is the height of the smaller one of first and last line.
    
--->All other containers are less wide and thus would need a higher water level in order to hold more water.

--->The smaller one of first and last line doesn't support a higher water level 
    and can thus be safely removed from further consideration.



class Solution {
public:
    int maxArea(vector<int>& height) {
        
        int strt=0;
        int end=height.size();
        int water=0;
        
        while(strt<end){
        
        //find area=height*width
        //width=end-strt
        //height=min(height[strt],height[strt])
        
         int water=max( (end-strt) * min(height[strt],height[end]) );
      
      //so if height at strt is less than height od end
      //we are moving forward to get a big height,so that even though width with decreases
      //but if a height is more then area increases.
      
        if( height[strt] < height[end] )
             strt++;
         else
             end--;
        
        
        }
        
    }
};
