  link:
  https://leetcode.com/problems/search-a-2d-matrix/
  
  
  
  problem:
  Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.


Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true


Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13
Output: false


  //method-1 same  search in a row wise and column wise sorted array
  
  
class Solution {
public:
    
  
//     bool searchMatrix(vector<vector<int>>& mat, int target) {
        
//         int col=mat[0].size()-1;
//         int row=0;
        
//         while(row < mat.size()  && col>=0 ){
            
//             if(mat[row][col]==target) return true;
//            // else if(mat[row][col]>target) col--;
//            // else if(mat[row][col]<target) row++;
    
//                matrix[r][c] > target ? c-- : r++;
//         }
        
//         return false;
//     }
//};





//method-2

    
    bool binarySearchRow(vector<int>& matrow,int strt,int end,int target){
        
        while(strt<=end){
            int mid=strt+(end-strt)/2;
            
            if(matrow[mid]==target) return true;
            
            else if(matrow[mid]>target) end=mid-1;
            else if(matrow[mid]<target) strt=mid+1;   
        }
        return false;
        
    }
    
    
    
    bool searchMatrix(vector<vector<int>>& mat, int target) {
        
    int end=mat[0].size()-1;
    for(int i=0;i<mat.size();i++){
        
        if(mat[i][end]==target) return true; 
        if(mat[i][end]>target) 
            return binarySearchRow(mat[i],0,mat[i].size(),target);
    }
      
        return false;
        
    }
    
    
    
//method-3 - treat matrix as sorted list
 

public class Solution {
        public boolean searchMatrix(int[][] matrix, int target) {
            if (matrix == null || matrix.length == 0) {
                return false;
            }
            int start = 0, rows = matrix.length, cols = matrix[0].length;
            int end = rows * cols - 1;
            while (start <= end) {
                int mid = (start + end) / 2;
                if (matrix[mid / cols][mid % cols] == target) {
                    return true;
                } 
                if (matrix[mid / cols][mid % cols] < target) {
                    start = mid + 1;
                } else {
                    end = mid - 1;
                }
            }
            return false;
        }
    }
    

