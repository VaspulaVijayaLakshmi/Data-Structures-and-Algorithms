class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        
        int l=0,r=0;
        int n=nums.size();
        int res=0,temp_sum=0;
    
        while(r<n){
            
            temp_sum+=nums[r];
            
            while(l<r && temp_sum>k){
                temp_sum-=nums[l];
                l++;
            }

            if(k==0 && temp_sum==k)
             res += r-l+1;  

            else if(temp_sum==k)
             res+=1; 


            r++;
            
        }

        
        return res;
    }
};



// What are these conditions : 


//  if(k==0 && temp_sum==k)
//              res += r-l+1;  

// else if(temp_sum==k)
//     res+=1; 





// CASE 1 :  k>0

// SO lets sya we have [1,1,1] amd k=2

// we have 2 subarrays i.e, indices  [0,1] and [1,2]

// so if temp_sum==k , we do res+=1




// CASE 2 : k==0

// But lets say we have , k=0
// and array is [1,0,0,1]

// then subarrays are -> [0] [0] [0 0]

// so if k=0, subarray are r-l+1




// CASE 3 : k<0

// [-1,-1,1] and k=0

// so subarray is [-1,1] ,  but prblm with our code is 

// Ths condiiton never becomes true
// so we would not be able to shrink the window

//   while(l<r && temp_sum>k)




// ***********

// A basic problem on cumulative sum, difference of cumulative sum and hashMap PATTERN
// (hashMap if input array has negative elements, 
// hashSet if positive elements)



// https://hashnode.com/post/subarray-sum-equals-k-ckod8z19l0bbofqs1god753rz




CHECK NOTEBOOK _ notes




SOLUTION


class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        
        int l=0,r=0;
        int n=nums.size();
        int res=0,temp_sum=0;
        unordered_map<int,int> mp;
        
        mp[0]=1;
        // this is necessary because, lets say
        // k=2 and arr = [1,1,1]
    //     then [1,1] - sum =2 , and k=2 so, 2-2=0
    // wont be in array so add this

    
        while(r<n){
            
            temp_sum+=nums[r];

            int f=temp_sum-k;

            if(mp.find(f) != mp.end()){
                res += mp[f];
            }

            mp[temp_sum]++;
            r++;
            
           
        }

        
        return res;
    }
};





