prblm link:
https://leetcode.com/problems/longest-substring-without-repeating-characters/

prblm:
Given a string s, find the length of the longest substring without repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.





class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        
        unordered_map<char,int> mp;
        int maxi=0;
        int l=0,r=0;
        
        while(r<s.length()){
            
            //if the character present at index 'r'
            //is present in the map,we need to move left ptr "l" ,
            //such that we remove that from thew map
                while(mp.find(s[r])!=mp.end()){
                    mp.erase(s[l]);
                    l++;
                }
            
               //if the char is nt present in the map
            //inceremnet ptr and put that char in map
               mp[s[r]]++;
               maxi=max(maxi,r-l+1);
               r++;
            
            }
        
        
        
        return maxi;
    }
};
