class Solution {
public:

    int calculateXSum(unordered_map<int, int>& freq, int x) {

        priority_queue<pair<int, int>,vector<pair<int, int>>,
                       greater<pair<int, int>>> pq; 
        
         for (auto entry : freq) {

            pq.push({entry.second, entry.first});
            if(pq.size()>x) pq.pop();
        }

        int sum=0;
        while(pq.size()>0){
            sum+= pq.top().second * pq.top().first;
            pq.pop();
        }


        return sum;

    }

    vector<int> findXSum(vector<int>& nums, int k, int x) {
        
        unordered_map<int,int> mp;

        for(int i=0;i<k;i++){
            mp[nums[i]]++ ;
        }

        vector<int> arr;
        priority_queue<int> pq;

        arr.push_back(calculateXSum(mp, x));

        int pop_idx=0;
        for(int i=k;i<nums.size();i++){

            mp[nums[i]]++;

            mp[nums[pop_idx]]--;
            if(mp[nums[pop_idx]]==0){
                 mp.erase(mp[nums[pop_idx]]); 
            }
            pop_idx++;


            arr.push_back(calculateXSum(mp, x));


        }


        return arr;



    }
};



// priority_queue + sliding window + hashmap
 
// PQ - freq,val

