class Solution {
public:
    long long countSubarrays(vector<int>& nums, int k) {

        int maxi = *max_element(nums.begin(), nums.end());

        int l=0,r=0;
        long long res=0;
        unordered_map<int,int> mp;

        while(r<nums.size()){
           
            if(nums[r]==maxi)
              mp[nums[r]]++;

            while(mp[nums[r]]>=k){

                mp[nums[l]]--;
                l++;

            }

            res+=l;
            r++;

        }
        
        return res;
        
    }
};


// atleast K , so we are safe.

// max elemnt - freq map

// nums = [1,3,2,3,3,4], k = 2

// MAX = 3

// [1] maqelement - 1 - apears 1 time
// [1,3] max ele - 3 , appears 1 time

// [1,3,2] map elemnt - 1 time

// [1,3,2,3] ma ele - 2 times



// ATLEAST K times means  >= K times

// ATMOST K TIMEs means <=K times




// APPRAOCH 1: 

// so this can also be converted to , 

// Total NUmber of SUbarrays - Total NUmber of subrrays with At Most K-1

// so [1,3,2,3] till 



// APPROACH 2 :

// SInce we need to find >=K , once we find tht a subarray 




// or we can count res+=left;

// this gives us at each point , the numer of subrrays, ending starting at l,r

// now if a substring   l...r statisfies this condition, then 
// substring 0-r, 1-r,2,r...l,r

// satisfies the conditons

// so we do res+=left

// https://leetcode.com/problems/number-of-substrings-containing-all-three-characters/description/


// or result +=(n-right) something

// this is reverse of above if substr ending at r is satifying the condition, then substr
// substr ending at r+1, r+2, r...n will also staify the condition












// 2 POINTER : BRUTE FORCE

// class Solution {
// public:
//     long long countSubarrays(vector<int>& nums, int k) {
//         long maxi = *max_element(nums.begin(), nums.end()), count = 0; 

//         for (int i = 0 ; i < nums.size() ; i++) {
//             long maxOccurrences = 0;
//             for (int j = i ; j < nums.size() ; j++) {
//                 if (nums[j] == maxi) ++maxOccurrences;
//                 if (maxOccurrences >= k) {
//                     ++count;
//                 }
//             }
//         } 
//         return count;
//     }
// }

// ONE OPTIMIZATION WE CAN DO HERE IS : if the maxOccurences are >=K at any point
// the next window will all have maxOccurences >=K

// SO we can count the substrings as  res+=j and break the loop



// https://leetcode.com/problems/count-subarrays-where-max-element-appears-at-least-k-times/solutions/6696940/hashmap-sliding-window-with-images-example-walkthrough-c-python-java/
