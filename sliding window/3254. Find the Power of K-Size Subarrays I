class Solution {
public:
    vector<int> resultsArray(vector<int>& nums, int k) {
        
          int n=nums.size();
          vector<int> arr(n - k + 1, -1); 
          int consCnt=0;

          // K-sized window
          for(int i=0;i<k;i++){

            if(i>0 && nums[i] == nums[i-1]+1) 
               consCnt++;

            else
               consCnt=1;
          }
          
        //   first window
          if(consCnt==k)
            arr[0]= nums[k-1];


        // next window 
          int i=1;
          int j=k;
          while(j<n){
              
            if(nums[j] == nums[j-1]+1)
               consCnt++;

            else 
               consCnt=1;   

            // window size hit and check if the consCnt is 'k'  
            if(consCnt>=k){ 
              arr[i] = nums[j];
            } 

            i++;
            j++;  

          }

          return arr; 

    }
};



// [1,2,3,4,3,2,5]

// [1,2,3]
// [2,3,4]
// [3,4,3]



// https://leetcode.com/problems/find-the-power-of-k-size-subarrays-i/solutions/6050477/c-solution-sliding-window-approach-easy-to-understand/
