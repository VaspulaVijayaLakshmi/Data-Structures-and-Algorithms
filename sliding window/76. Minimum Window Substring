class Solution {
public:
    string minWindow(string s, string t) {

        int n1=s.size();
        int n2=t.size();

        if(n2>n1) return "";

        unordered_map<char,int> mp;

        for(int i=0;i<n2;i++)
           mp[t[i]]++;
        

        int i=0,j=0;
        int minLen=INT_MAX;
        int strtIdx=0;

// count is the number of chars in string 't'
        int counter=t.size();

        while(j<n1){

            if(mp[s[j]]>0){
             counter--;
            }

// the elent tht doesnt exist in map, will go negative
             mp[s[j]]--;

// we fund the str,now we keep shrinking the str to find the min str
            while(counter==0){

              if(j-i<minLen){   
                strtIdx = i;
                minLen=j-i;
              }

            //   now shrink the window
            // so if tht element was in map, since we moving to left
            // add tht to map, as TO BE FOUND ELEMeNT

            //  if tht char is present in ma, then only increment tht element
              mp[s[i]]++; 
              if(mp[s[i]]>0){ 
                counter++;
              }

              i++;
                
            }

// expand the window
            j++;

            
        }

        return minLen==INT_MAX? "" : s.substr(strtIdx,minLen+1);
        
    }
};



// s="TOCCDTDFTTODC"   t="ttoc"

// we maintain an map -    t-2
//                         o-1
//                         c-1

//                         so everytime we find the char , in map,  
//                         decrement, the char count.


                        // now if we want to see if all chars,are covered
                        // we need to check if all the  chars in hashmap
                        // are zero, so insetad of this we could 
                        // maintain a COUNT
                        // as every elmenet becomes 0, we need to
                        // decorement this count, if count =0
                        // then we formed 


                        // when we found count=0
                        // we can shrink the window



