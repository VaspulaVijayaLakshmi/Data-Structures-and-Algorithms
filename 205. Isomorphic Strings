

Given two strings s and t, determine if they are isomorphic.

Two strings s and t are isomorphic if the characters in s can be replaced to get t.

All occurrences of a character must be replaced with another character while preserving the order 
of characters. No two characters may map to the same character, but a character may map to itself.

 

Example 1:

Input: s = "egg", t = "add"
Output: true



Example 2:

Input: s = "foo", t = "bar"
Output: false



Example 3:

Input: s = "paper", t = "title"
Output: true









class Solution {
public:
    
    bool isomorphic(string s ,string t){
        
        unordered_map<char,char> mp;
        int n=s.length();
        
        for(int i=0;i<n;i++){
        
            if(mp.find(s[i]) == mp.end()){
                mp[s[i]]=t[i];
            }
            
            else
                if(mp[s[i]]!=t[i])
                    return false;
                
        }
        return true;
    }
    
    bool isIsomorphic(string s, string t) {
    
        if(s.length()!=t.length())
             return false;
        
    
        return isomorphic(s,t) && isomorphic(t,s);
        
    }
};


//why isomorphic(s,t) && isomorphic(t,s)?
//consider this example
//"badc"
//"baba"


//isomorphic(s,t)
// b--b
// a--a
// d--b
// c--a

//here b points to b,but d also points to b
//but each char shld point to only 1 char
//so we will check vice versal as well


//isomorphic(t,s)
//b--b
// a--a
// b--d
// a--c

//here b points to b and b points to d
//so this is wrong
