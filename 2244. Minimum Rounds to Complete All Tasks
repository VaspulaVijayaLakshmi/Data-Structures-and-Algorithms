You are given a 0-indexed integer array tasks, where tasks[i] represents the difficulty level of a task. In each round, you can complete either 2 or 3 tasks of the same difficulty level.

Return the minimum rounds required to complete all the tasks, or -1 if it is not possible to complete all the tasks.

 

Example 1:

Input: tasks = [2,2,3,3,2,4,4,4,4,4]
Output: 4
Explanation: To complete all the tasks, a possible plan is:
- In the first round, you complete 3 tasks of difficulty level 2. 
- In the second round, you complete 2 tasks of difficulty level 3. 
- In the third round, you complete 3 tasks of difficulty level 4. 
- In the fourth round, you complete 2 tasks of difficulty level 4.  
It can be shown that all the tasks cannot be completed in fewer than 4 rounds, so the answer is 4.



Example 2:

Input: tasks = [2,3,3]
Output: -1
Explanation: There is only 1 task of difficulty level 2, but in each round, you can only complete either 2 or 3 tasks of the same difficulty level. Hence, you cannot complete all the tasks, and the answer is -1.



class Solution {
public:
    int minimumRounds(vector<int>& tasks) {
       unordered_map<int,int> mp;
        int rounds=0;
        
        for(int i=0;i<tasks.size();i++){
            mp[tasks[i]]++;
        }
            
  
            for(auto x: mp){
                
                if(x.second==1) // if a task is present only once, return -1
                return -1;
                
                //take as many 3 as possible
                rounds+=x.second/3;
                
                //now we may have [4,4,4,4,4]
                //can be divided as [4,4,4] [4,4]
                
                //[4,4,4,4,4,4,4]
                //can be divided as [4,4,4] [4,4,4] [4]
                //but this can also be divided as [4,4,4] [4,4] [4,4]
                
                
                //so ater dividing by 3 are 2 reminders left => 1 or 2
                //if reminder is 2 => then round++
                //if reminder is 1,we can take one element from other 3-element set and make it 2 2-element sets
                
                
               // we can write this in 2 stmts
                    
                //1.    
                // if(x.second%3==1 || x.second%3==2)
                //     round++;
                
               // 2.
                    if(x.second%3!=0)
                        rounds++;
            
            }
        
        return rounds;
    }
};
